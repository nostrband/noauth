# Stage 1: Build
FROM node:22.7-alpine@sha256:ed9736a13b88ba55cbc08c75c9edac8ae7f72840482e40324670b299336680c1 AS build

# Lock environment for reproducibility
ARG SOURCE_DATE_EPOCH
ENV TZ=UTC
WORKDIR /usr/src/app

RUN echo ${SOURCE_DATE_EPOCH}

# Install essential build tools
#RUN apk add --no-cache python3 make g++

# Copy only package-related files first (to leverage Docker cache)
COPY lerna.json ./
COPY package*.json ./
COPY packages/client/package*.json ./packages/client/
COPY packages/common/package*.json ./packages/common/
COPY packages/backend/package*.json ./packages/backend/
COPY packages/server/package*.json ./packages/server/

# Install dependencies in a deterministic way (no scripts, exact versions)
RUN npm ci --ignore-scripts
#RUN rm -Rf ~/.npm/_logs
#RUN ls -la .
#RUN ls -la ~
#RUN ls -la ~/.npm
# Copy the rest of the project
COPY . .

# Set timestamp for deterministic builds: Ensure all files have the same timestamp
#RUN find /usr/src/app -exec touch -t ${SOURCE_DATE_EPOCH} {} +

# Build project
RUN cd packages/common; npm run build:hosted
RUN cd packages/backend; npm run build
#RUN cd packages/client; npm run build:hosted
RUN cd packages/server; npm run build

# # Stage 2: Client (Nginx)
# FROM nginx:alpine AS client
# WORKDIR /usr/share/nginx/html

# # Copy built client assets with preserved permissions
# COPY --from=build /usr/src/app/packages/client/build ./
# COPY packages/client/nginx/nginx.conf /etc/nginx/conf.d/default.conf

# # Run Nginx
# CMD ["nginx", "-g", "daemon off;"]

# Stage 3: Server (Node.js)
FROM node:22.7-alpine@sha256:ed9736a13b88ba55cbc08c75c9edac8ae7f72840482e40324670b299336680c1 AS server
WORKDIR /usr/src/app

# Copy only built files and necessary dependencies
COPY --from=build /usr/src/app ./

# # Ensure Prisma migrations are applied
# this breaks reproduceability
#RUN npx prisma migrate deploy
RUN ls -l prisma

# # Expose the required port
EXPOSE 8080

# Run the server
CMD ["npm", "run", "start:server"]
